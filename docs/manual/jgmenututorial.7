.TH "JGMENUTUTORIAL(7)
.PD 0
.P
.PD
% Johan Malm
.PD 0
.P
.PD
% 17 December, 2017
.SH NAME
.PP
The jgmenu tutorial
.SH INTRODUCTION
.PP
This tutorial aims to explain the usage of jgmenu through a set of
.PD 0
.P
.PD
lessons.
.SH LESSONS
.SS Lesson 1
.PP
After installing jgmenu, you can get going quickly by running:
.IP
.nf
\f[C]
jgmenu
\f[]
.fi
.PP
That\[aq]s it!
.PP
There are three points worth noting about what you have just done:
.IP \[bu] 2
You should see a "Linux/BSD system" menu with categories such as
.PD 0
.P
.PD
"Graphics" and "Office".
We call this menu "pmenu" (explained
.PD 0
.P
.PD
in lesson 7).
.IP \[bu] 2
If you use tint2, jgmenu should have imitated its appearance
.PD 0
.P
.PD
and aligned with its position.
.IP \[bu] 2
You have just started a long\-running application.
If you click
.PD 0
.P
.PD
outside the menu, press escape or select a menu item (using
.PD 0
.P
.PD
mouse or keyboard), the menu will no longer be visible but is
.PD 0
.P
.PD
still running.
It can be awoken (made visible) by executing
.PD 0
.P
.PD
\f[C]jgmenu_run\f[].
.PP
If you do not use tint2 or if you wish to override some of its
.PD 0
.P
.PD
settings, you can create a config file by running:
.IP
.nf
\f[C]
jgmenu\ init
\f[]
.fi
.PP
Edit this config file (~/.config/jgmenu/jgmenurc) to suit your
.PD 0
.P
.PD
system.
Read the man page JGMENU(1) for further information.
.PP
If you have a config file at ~/.config/jgmenu/jgmenurc and want to
.PD 0
.P
.PD
ignore it for the purposes of running one of the lessons, just use
.PD 0
.P
.PD
the command line argument "\-\-config\-file=" without specifying a file.
.SS Lesson 2
.PP
You can also start jgmenu with
.IP
.nf
\f[C]
jgmenu_run
\f[]
.fi
.PP
The advantage of this wrapper is that it will either awake jgmenu or
.PD 0
.P
.PD
start a new instance depending on if it is already running or not.
.PP
This makes it suitable for using with panels and keyboard shortcuts.
.PP
For example, if you use tint2 and want a traditional "start menu",
.PD 0
.P
.PD
you can do one of the following using tint2conf or by editing tint2rc
.PD 0
.P
.PD
directly:
.IP \[bu] 2
Add jgmenu.desktop to your launcher
.IP \[bu] 2
Create a button setting \f[C]button_lclick_command\ =\ jgmenu_run\f[]
.SS Lesson 3
.PP
From this point onwards, it is assumed that you understand basic
.PD 0
.P
.PD
shell usage including re\-direction (e.g.
<, >) and piping (e.g.
|).
.PP
The syntax below (here\-document) is used to denote the creation of a
.PD 0
.P
.PD
text file from whatever is between the EOFs.
You can of course use
.PD 0
.P
.PD
your favourite text editor instead.
.IP
.nf
\f[C]
cat\ >file\ <<EOF
foo
bar
EOF
\f[]
.fi
.PP
There are many ways to run jgmenu.
In lesson 1, you saw jgmenu as a
.PD 0
.P
.PD
long\-running application.
As we go through the next few lessons we
.PD 0
.P
.PD
will run jgmenu as a short\-lived applications.
This means that it
.PD 0
.P
.PD
starts from scratch every time it is called.
.PP
So let\[aq]s get back to basics.
Try the following:
.IP
.nf
\f[C]
echo\ >foo.txt\ <<EOF
xterm
firefox
EOF
\f[]
.fi
.PP
If you have not got used to the here\-document syntax yet, it just
.PD 0
.P
.PD
means that you put the words "xterm" and "firefox" in a text file
.PD 0
.P
.PD
(which you can of course do using a text editor).
Then do:
.IP
.nf
\f[C]
cat\ foo.txt\ |\ jgmenu\ \-\-simple\ \-\-icon\-size=0
\f[]
.fi
.PP
The option \-\-simple make jgmenu short\-lived, disables all syncing
.PD 0
.P
.PD
with tint2 and reads menu items from \f[I]stdin\f[].
.PP
The option \-\-icon\-size=0, disables icons (i.e.
it does not just
.PD 0
.P
.PD
display them at zero size, it actually avoids loading them)
.SS Lesson 4
.PP
As you saw in the previous example, each line fed to \f[I]stdin\f[]
becomes
.PD 0
.P
.PD
a menu item.
Any line containing two fields separated by a comma
.PD 0
.P
.PD
is parsed as \f[I]description\f[],\f[I]command\f[].
Consider the following:
.IP
.nf
\f[C]
cat\ <<EOF\ >menu.sh
#!/bin/sh
(
printf\ "Terminal,xterm\\n"
printf\ "File\ Manager,pcmanfm\\n"
)\ |\ jgmenu\ \-\-vsimple
EOF

chmod\ +x\ menu.sh
\&./menu.sh
\f[]
.fi
.PP
This lets you give a more meaningful description to each menu item.
.PP
The command line argument \-\-vsimple is the same as \-\-simple, but
also
.PD 0
.P
.PD
disables icons and ignores jgmenurc (if it exists).
.SS Lesson 5
.PP
To display icons, you need to populate the third field.
.PP
By default, jgmenu will obtain the icon theme from xsettings (if
.PD 0
.P
.PD
it is running) or tint2rc (if it exists).
When running with the
.PD 0
.P
.PD
\-\-simple argument, make sure that \f[I]icon_theme\f[] is set to
something
.PD 0
.P
.PD
sensible in your $HOME/.config/jgmenu/jgmenurc.
.IP
.nf
\f[C]
(
Browser,firefox,firefox
File\ manager,pcmanfm,system\-file\-manager
Terminal,xterm,utilities\-terminal
Lock,i3lock\ \-c\ 000000,system\-lock\-screen
Exit\ to\ prompt,openbox\ \-\-exit,system\-log\-out
Reboot,systemctl\ \-i\ reboot,system\-reboot
Poweroff,systemctl\ \-i\ poweroff,system\-shutdown
)\ |\ jgmenu\ \-\-simple
\f[]
.fi
.PP
In the third field you can also specify the full path if you wish
.PD 0
.P
.PD
e.g.
"/usr/share/icons/Faenza/places/22/folder.png"
.SS Lesson 6
.PP
So far we have looked at producing a single "root" menu only.
.PD 0
.P
.PD
jgmenu understands a small amount of markup and enables submenus
.PD 0
.P
.PD
by ^tag() and ^checkout().
Try this:
.IP
.nf
\f[C]
cat\ <<EOF\ >menu.txt
Terminal,xterm
File\ Manager,pcmanfm
Settings,^checkout(settings)

Settings,^tag(settings)
Set\ Background\ Image,nitrogen
EOF

jgmenu\ \-\-vsimple\ \-\-csv\-file="menu.txt"
\f[]
.fi
.SS Lesson 7
.PP
freedesktop.org have developed a menu standard which is adhered to
.PD 0
.P
.PD
by the big Desktop Environments.
We will refer to this type of menu
.PD 0
.P
.PD
as XDG.
jgmenu can run three types of XDG(ish) menus: pmenu, xdg and
.PD 0
.P
.PD
lx.
.PP
To understand the subtleties between them, you need a basic
.PD 0
.P
.PD
appreciataion of the XDG menu\-spec and desktop\-entry\-spec.
See:
.PD 0
.P
.PD
http://standards.freedesktop.org/ for further information.
.PP
To keep things simple, when discussing XDG paths, only one location
.PD 0
.P
.PD
will be referred to rather than XDG variables and every possible
.PD 0
.P
.PD
location.
So for example, if "/usr/share" is quoted, it may refer to
.PD 0
.P
.PD
"/usr/local/share", "$HOME/.local/share", etc on your system.
.PP
In brief, there are three types of files which define the Linux/BSD
.PD 0
.P
.PD
system menu:
.IP \[bu] 2
\&.menu (/etc/xdg/menus)
.PD 0
.P
.PD
These are XML files describing such things as the menu categories
.PD 0
.P
.PD
and directory structure.
.IP \[bu] 2
\&.directory (/usr/share/desktop\-directories)
.PD 0
.P
.PD
These describe the menu directories
.IP \[bu] 2
\&.desktop (/usr/share/applications)
.PD 0
.P
.PD
Each application has a .desktop file associated with it.
These
.PD 0
.P
.PD
files contain most of the information needed to build a menu
.PD 0
.P
.PD
(e.g.
"Name", "Exec command", "Icon", "Category")
.PP
\f[C]pmenu\f[] is written in python by \@o9000.
It uses .directory and
.PD 0
.P
.PD
\&.desktop files to build a menu, but ignores any .menu files.
.PD 0
.P
.PD
Instead of the structure specified in the .menu file, it simply maps
.PD 0
.P
.PD
each ".desktop" application onto one of the ".directory" categories.
.PD 0
.P
.PD
If a matching ".directory" category does not exist, it tries to
.PD 0
.P
.PD
cross\-reference "additional categories" to "related categories" in
.PD 0
.P
.PD
accordance with the XDG menu\-spec.
.PD 0
.P
.PD
This is a generic approach which avoids Desktop Environment specific
.PD 0
.P
.PD
rules defined in the .menu file.
It ensures that all .desktop files
.PD 0
.P
.PD
are included in the menu.
.PP
\f[C]xdg\f[] is written in C by myself.
It uses libxml2 to parse the .menu
.PD 0
.P
.PD
file, but is otherwise written from scratch.
It adheres to the
.PD 0
.P
.PD
basics of XDG\[aq]s menu\-spec but is not fully compliant.
.PP
\f[C]lx\f[] uses LXDE\[aq]s libmenu\-cache to generate an XDG compliant
menu
.PD 0
.P
.PD
including separators and internationalization.
.PP
Set \f[C]csv_cmd\f[] in jgmenurc to specify which of these csv\-commands
you
.PD 0
.P
.PD
wish to run.
.SS Lesson 8
.PP
You can create a very simple XDG menu without any directories or
.PD 0
.P
.PD
categories in the following way:
.IP
.nf
\f[C]
jgmenu_run\ xdg\ \-\-no\-dirs\ |\ jgmenu\ \-\-vsimple
\f[]
.fi
.PP
"xdg \-\-no\-dirs" outputs all apps with a .desktop file
.PD 0
.P
.PD
(normally in /usr/share/applications) without and categories
.PD 0
.P
.PD
or directories.
.PP
jgmenu has a \f[I]search\f[] capability.
When a menu is open, just start
.PD 0
.P
.PD
typing to invoke a filter.
.SS Lesson 9
.PP
When running pmenu, xdg or lx, you can add menu items to the root
.PD 0
.P
.PD
menu by editing append.csv and/or prepend.csv in ~/.config/jgmenu.
.PP
For example, you could do:
.IP
.nf
\f[C]
cat\ >$HOME/.config/jgmenu/prepend.csv\ <<EOF
Browser,firefox,firefox
File\ manager,pcmanfm,system\-file\-manager
Terminal,xterm,utilities\-terminal
^sep()
EOF

cat\ >$HOME/.config/jgmenu/append.csv\ <<EOF
^sep()
Exit\ to\ prompt,openbox\ \-\-exit,system\-log\-out
Suspend,systemctl\ \-i\ suspend,system\-log\-out
Reboot,systemctl\ \-i\ reboot,system\-reboot
Poweroff,systemctl\ \-i\ poweroff,system\-shutdown
EOF
\f[]
.fi
.PP
^sep() inserts a horizontal separator line
