.\" Automatically generated by Pandoc 2.6
.\"
.TH "JGMENU" "1" "12 Mar, 2019" "" ""
.hy
.SH NAME
.PP
jgmenu - A simple X11 menu
.SH SYNOPSIS
.PP
jgmenu\ [--no-spawn]\ [--checkout=<\f[I]tag\f[R]>]\ [--config-file=<\f[I]file\f[R]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [--icon-size=<\f[I]size\f[R]>] [--at-pointer]
[--hide-on-startup]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [--simple] [--vsimple] [--csv-file<\f[I]file\f[R]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [--csv-cmd=<\f[I]command\f[R]>] [--die-when-loaded]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [--center]
.PP
jgmenu init [--help | <\f[I]options\f[R]>]
.SS Use these three commands to get started
.IP
.nf
\f[C]
\[u250C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u252C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2510]
\[br] jgmenu             \[br] launch menu             \[br]
\[u251C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u253C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2524]
\[br] jgmenu init        \[br] create config file      \[br]
\[u251C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u253C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2524]
\[br] man jgmenututorial \[br] read step-by-step guide \[br]
\[u2514]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2534]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2518]
\f[R]
.fi
.SH DESCRIPTION
.PP
jgmenu is a small menu application for Linux/BSD.
It is intended to
.PD 0
.P
.PD
be used with openbox and tint2, but is not dependent on these.
.PP
jgmenu reads a list of new-line (`\[rs]n') separated items from a file
.PD 0
.P
.PD
and creates a menu.
Each line is parsed into the following fields
.PD 0
.P
.PD
using comma as a field separator:
.IP "(1)" 4
\f[I]description\f[R]
.PD 0
.P
.PD
.IP "(2)" 4
\f[I]command\f[R]
.PD 0
.P
.PD
.IP "(3)" 4
\f[I]icon\f[R],
.PD 0
.P
.PD
.IP "(4)" 4
\f[I]working directory\f[R]
.PD 0
.P
.PD
.IP "(5)" 4
\f[I]metadata\f[R]
.PP
Empty lines and lines beginning with `#' are ignored.
When the user
.PD 0
.P
.PD
selects an item by left-clicking or pressing enter), the
\f[C]command\f[R]
.PD 0
.P
.PD
of their selection is executed as a new process.
.PP
For example:
.IP
.nf
\f[C]
printf \[dq]Terminal,xterm\[rs]nWeb Browser,firefox\[dq] | jgmenu --simple  
\f[R]
.fi
.PP
If the user wishes to use a comma in a field, triple quotes can be
.PD 0
.P
.PD
used around the whole field in the format
aaa,\[dq]\[dq]\[lq]bbb\[rq]\[dq]\[dq]
.PP
For example:
.IP
.nf
\f[C]
foo,\[dq]\[dq]\[dq]\[ha]pipe(find . -printf \[aq]%f,display %p,%p\[rs]n\[aq])\[dq]\[dq]\[dq]
\f[R]
.fi
.SS Markup
.PP
The syntax \[ha]foo(bar) is used to carry out action \[lq]foo\[rq] with
argument
.PD 0
.P
.PD
\[lq]bar\[rq].
.PP
The following markup is supported in the \f[I]description\f[R] field:
.IP \[bu] 2
\[ha]sep() - define a separator (with or without text)
.PP
The following markup is supported in the \f[I]command\f[R] field:
.IP \[bu] 2
\[ha]tag() - define a submenu (can be in the \f[I]description\f[R] field
if
.PD 0
.P
.PD
\ \ no other field is defined on that line)
.IP \[bu] 2
\[ha]checkout() - open a submenu in a new window
.IP \[bu] 2
\[ha]root() - open a submenu in the root window, replacing the
.PD 0
.P
.PD
\ \ current menu
.IP \[bu] 2
\[ha]sub() - draw a \[lq]submenu\[rq] arrow
.IP \[bu] 2
\[ha]back() - check-out parent menu
.IP \[bu] 2
\[ha]term() - run program in terminal
.IP \[bu] 2
\[ha]pipe() - execute sub-process and checkout a menu based on its
.PD 0
.P
.PD
\ \ stdout.
.IP \[bu] 2
\[ha]filter() - invoke search
.SS Icons
.PP
Icons will be displayed if the third field is populated; for example:
.IP
.nf
\f[C]
Terminal,xterm,utilities-terminal
Firefox,firefox,firefox
\f[R]
.fi
.SH OPTIONS
.TP
.B --no-spawn
redirect command to stdout rather than executing it
.TP
.B --checkout=<\f[I]tag\f[R]>
checkout submenu <\f[I]tag\f[R]> on startup
.TP
.B --config-file=<\f[I]file\f[R]>
read config file
.TP
.B --icon-size=<\f[I]size\f[R]>
specify icon size (22 by default)
.PD 0
.P
.PD
\ \ \ \ \ \ \ If set to 0, icons will not be loaded.
.TP
.B --at-pointer
launch menu at mouse pointer
.TP
.B --hide-on-startup
start menu is hidden state
.TP
.B --simple
\ - ignore tint2 settings
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ - run in `short-lived' mode (i.e.\ exit after mouse
click or
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ enter/escape)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ - read menu items from \f[I]stdin\f[R]
.TP
.B --vsimple
same as \[en]simple, but also disables icons and ignores jgmenurc
.TP
.B --csv-file=<\f[I]file\f[R]>
specify menu file (in jgmenu flavoured CSV format)
.PD 0
.P
.PD
\ \ \ \ \ \ \ If file cannot be opened, input if reverted to
\f[I]stdin\f[R]
.TP
.B --csv-cmd=<\f[I]command\f[R]>
specify command to produce menu data
.PD 0
.P
.PD
\ \ \ \ \ \ \ E.g.
\f[C]jgmenu_run pmenu\f[R]
.TP
.B --die-when-loaded
open menu and then exit(0).
This is for debugging and testing.
.TP
.B --center
center align menu horizontally and vertically
.PD 0
.P
.PD
\ \ \ \ \ \ \ Also set \f[C]tint2_look=0\f[R] to disable alignment to
tint2 panel
.SH USER INTERFACE
.IP \[bu] 2
Up/Down - select previous/next item
.PD 0
.P
.PD
.IP \[bu] 2
Left/Right - move to parent/sub menu
.PD 0
.P
.PD
.IP \[bu] 2
PgUp/PgDn - scroll up/down by one menu\[cq]s worth of items
.PD 0
.P
.PD
.IP \[bu] 2
Home/End - select first/last item
.PD 0
.P
.PD
.IP \[bu] 2
Enter - select an item or open a submenu
.PD 0
.P
.PD
.IP \[bu] 2
F5 - restart
.PD 0
.P
.PD
.IP \[bu] 2
F8 - print node tree to stderr
.PD 0
.P
.PD
.IP \[bu] 2
F9 - exit(1)
.PD 0
.P
.PD
.IP \[bu] 2
F10 - exit(0)
.PD 0
.P
.PD
.IP \[bu] 2
Backspace - return to parent menu
.PP
Type any string to invoke a search.
Words separated by space will
.PD 0
.P
.PD
be searched for using OR logic (i.e.\ the match of either word is
.PD 0
.P
.PD
sufficient to display an item).
.SH CONFIGURATION FILE
.PP
If no file is specified using the \[en]config-file= option, the XDG Base
.PD 0
.P
.PD
Directory Specification is adhered to.
I.e:
.IP \[bu] 2
Global config in \f[C]${XDG_CONFIG_DIRS:-/etc/xdg}\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
User config override in \f[C]${XDG_CONFIG_HOME:-$HOME/.config}\f[R]
.PP
For most users \[ti]/.config/jgmenu/jgmenurc is appropriate.
.PP
Global config variables are set in the following order (i.e.\ bottom
.PD 0
.P
.PD
of list has higher precedence):
.IP \[bu] 2
built-in defaults (config.c)
.PD 0
.P
.PD
.IP \[bu] 2
tint2rc config file (can be specified by \f[C]TINT2_CONFIG\f[R]
.PD 0
.P
.PD
\ \ \ \ environment variable
.PD 0
.P
.PD
.IP \[bu] 2
jgmenurc config file (can be specified by \[en]config-file=)
.PD 0
.P
.PD
.IP \[bu] 2
command line arguments
.SS Syntax
.PP
Lines beginning with # are ignored.
.PP
All other lines are recognised as setting variables in the format
.PD 0
.P
.PD
\f[I]key\f[R] = \f[I]value\f[R]
.PP
White spaces are mostly ignored.
.SS Values
.PP
Unless otherwise specified, values as treated as simple strings.
.PP
Here follow some specific types:
.PP
boolean
.PD 0
.P
.PD
\ \ \ \ When a variable takes a boolean value, only 0 and 1 are
accepted.
.PD 0
.P
.PD
\ \ \ \ 0 means false; 1 means true.
.PP
integer
.PD 0
.P
.PD
\ \ \ \ When a variable takes an integer value, only numerical values
are
.PD 0
.P
.PD
\ \ \ \ accepted.
The only valid characters are digits (0-9) and
.PD 0
.P
.PD
\ \ \ \ minus-sign.
.PP
\ \ \ \ All integer variables relating to geometry and position are
.PD 0
.P
.PD
\ \ \ \ interpreted as pixel values unless otherwise specified.
.PP
color
.PD 0
.P
.PD
\ \ \ \ When a variable takes a color value, only the syntax described
.PD 0
.P
.PD
\ \ \ \ below is recognised:
.PP
\ \ \ \ #rrggbb aaa
.PP
\ \ \ \ where rr, gg and bb represent hexadecimal values (00-ff) for
.PD 0
.P
.PD
\ \ \ \ the colours red, green and blue respectively; and aaa stands for
.PD 0
.P
.PD
\ \ \ \ the alpha channel value expressed as a percentage (0-100).
.PD 0
.P
.PD
\ \ \ \ (i.e.\ 100 means no transparency and 0 means fully transparent.)
.PP
\ \ \ \ For example #ff0000 100 represents red with no transparency,
.PD 0
.P
.PD
\ \ \ \ whereas #000088 50 means dark blue with 50% transparency.
.PP
pathname
.PD 0
.P
.PD
\ \ \ \ When a variable takes a pathname value, it is evaluated as a
.PD 0
.P
.PD
\ \ \ \ string.
If the first character is tilde (\[ti]), it will be
.PD 0
.P
.PD
\ \ \ \ replaced by the the environment variable $HOME just as a shell
.PD 0
.P
.PD
\ \ \ \ would expand it.
.SS Variables
.PP
stay_alive = \f[B]boolean\f[R] (default 1)
.PP
\ \ \ \ If set to 1, the menu will \[lq]hide\[rq] rather than
\[lq]exit\[rq] when the
.PD 0
.P
.PD
\ \ \ \ following events occur:
.PD 0
.P
.PD
\ \ \ \ \ \ - clicking on menu item
.PD 0
.P
.PD
\ \ \ \ \ \ - clicking outside the menu
.PD 0
.P
.PD
\ \ \ \ \ \ - pressing escape
.PD 0
.P
.PD
\ \ \ \ When in the hidden mode, a USR1 signal will \[lq]un-hide\[rq]
the menu.
.PP
hide_on_startup = \f[B]boolean\f[R] (default 0)
.PP
\ \ \ \ If set to 1, jgmenu start in \[lq]hidden\[rq] mode.
This is useful for
.PD 0
.P
.PD
\ \ \ \ starting\ jgmenu during the boot process and then sending a
.PD 0
.P
.PD
\ \ \ \ \f[C]killall -SIGUSR1 jgmenu\f[R] to show the menu.
.PP
csv_cmd = \f[B]string\f[R] (default \f[C]pmenu\f[R])
.PP
\ \ \ \ Defines the command to produce the jgmenu flavoured CSV for
.PD 0
.P
.PD
\ \ \ \ \f[C]jgmenu\f[R].
Accpetable keyword include pmenu, lx and ob.
.PD 0
.P
.PD
\ \ \ \ If a value is given other than these keywords, it will be
.PD 0
.P
.PD
\ \ \ \ executed in a shell (so be careful!).
If left blank, jgmenu
.PD 0
.P
.PD
\ \ \ \ will read from \f[B]stdin\f[R].
Examples:
.IP
.nf
\f[C]
csv_cmd = lx
csv_cmd = jgmenu_run lx --no-dirs  
csv_cmd = cat \[ti]/mymenu.csv  
\f[R]
.fi
.PP
tint2_look = \f[B]boolean\f[R] (default 1)
.PP
\ \ \ \ Reads tint2rc and parses config options for colours,\ dimensions
.PD 0
.P
.PD
\ \ \ \ and alignment.
Also reads tint2 button environment variables.
.PD 0
.P
.PD
\ \ \ \ These give more accurate alignment along the length of the panel
.PD 0
.P
.PD
\ \ \ \ than what parsing the tint2 config file can achieve.
.PP
at_pointer = \f[B]boolean\f[R] (default 0)
.PP
\ \ \ \ If enabled, the menu is launched at the pointer position,
.PD 0
.P
.PD
\ \ \ \ ignoring \f[C]menu_margin_?\f[R] and \f[C]menu_?align\f[R]
values.
.PP
edge_snap_x = \f[B]integer\f[R] (default 30)
.PP
\ \ \ \ Specify the distance (in pixles) from the left hand edge, within
.PD 0
.P
.PD
\ \ \ \ which the menu will snap to the edge.
.PD 0
.P
.PD
\ \ \ \ Note that this only applies in \f[C]at_pointer\f[R] mode.
.PP
terminal_exec = \f[B]string\f[R] (default x-terminal-emulator)
.PD 0
.P
.PD
terminal_args = \f[B]string\f[R] (default -e)
.PP
\ \ \ \ The values of these two variables are used to build a string to
.PD 0
.P
.PD
\ \ \ \ launch programs requiring a terminal to run.
.PD 0
.P
.PD
\ \ \ \ With the default values, the string would become:
.PP
\ \ \ \ x-terminal-emulator -e `some_command with arguments'
.PP
\ \ \ \ terminal_args must finish with `-e' or equivalent (where `-e'
.PD 0
.P
.PD
\ \ \ \ refers to the meaning of `-e' in `xterm -e'.
.PP
monitor = \f[B]integer\f[R] (default 0)
.PP
\ \ \ \ Specify a particular monitor as an index starting from 1.
.PD 0
.P
.PD
\ \ \ \ If 0, the menu will be launched on the monitor where the mouse
.PD 0
.P
.PD
\ \ \ \ is.
.PP
hover_delay = \f[B]integer\f[R] (default 100)
.PP
\ \ \ \ The amount of time (in milliseconds) from hovering over an item
.PD 0
.P
.PD
\ \ \ \ until a submenu is opened.
.PP
hide_back_items = \f[B]boolean\f[R] (default 1)
.PP
\ \ \ \ If enabled, all \[ha]back() items will be suppressed.
As a general
.PD 0
.P
.PD
\ \ \ \ rule, it should be set to 1 for a multi-window menu, and 0 when
.PD 0
.P
.PD
\ \ \ \ in single-window mode.
.PP
columns = \f[B]integer\f[R] (default 1)
.PP
\ \ \ \ Specify the number of columns in which to show menu items
.PP
tabs = \f[B]integer\f[R] (default 120)
.PP
\ \ \ \ Specify the position is pixels of the first tab
.PP
menu_margin_x = \f[B]integer\f[R] (default 0)
.PD 0
.P
.PD
menu_margin_y = \f[B]integer\f[R] (default 0)
.PP
\ \ \ \ \[lq]margin\[rq] refers to space outside an object
.PD 0
.P
.PD
\ \ \ \ The \f[C]menu_margin_*\f[R] variables refer to the distance
between the
.PD 0
.P
.PD
\ \ \ \ menu (=X11 window) and the edge of the screen.
.PD 0
.P
.PD
\ \ \ \ See note on \f[C]_NET_WORKAREA\f[R] under
\f[C]menu_{v,h}align\f[R] variables
.PP
menu_width = \f[B]integer\f[R] (default 200)
.PP
\ \ \ \ Set the \f[I]minimum\f[R] menu width.
The menu width will adjust to the
.PD 0
.P
.PD
\ \ \ \ longest item in the current (sub)menu.
If a filter is applied
.PD 0
.P
.PD
\ \ \ \ (e.g.\ by the user typing) the menu width will NOT adjust.
.PP
menu_height_min = \f[B]integer\f[R] (default 0)
.PD 0
.P
.PD
menu_height_max = \f[B]integer\f[R] (default 0)
.PP
\ \ \ \ Set the min and max height of the root menu.
If these are set to
.PD 0
.P
.PD
\ \ \ \ the same value, the menu height will be fixed at that value.
If
.PD 0
.P
.PD
\ \ \ \ set to zero, they will be ignored.
.PP
menu_height_mode = (static | dynamic) (default static)
.PP
\ \ \ \ \[lq]static\[rq] means that the height of the initial root menu
will be
.PD 0
.P
.PD
\ \ \ \ used for any subsequent \[ha]root() action.
.PP
\ \ \ \ \[lq]dynamic\[rq] means that the root menu height will be
re-calculated
.PD 0
.P
.PD
\ \ \ \ every time the root menu is redefined using \[ha]root().
.PP
menu_padding_top = \f[B]integer\f[R] (default 5)
.PD 0
.P
.PD
menu_padding_right = \f[B]integer\f[R] (default 5)
.PD 0
.P
.PD
menu_padding_bottom = \f[B]integer\f[R] (default 5)
.PD 0
.P
.PD
menu_padding_left = \f[B]integer\f[R] (default 5)
.PP
\ \ \ \ \[lq]padding\[rq] refers to space inside an object (between
border and
.PD 0
.P
.PD
\ \ \ \ content)
.PP
menu_radius = \f[B]integer\f[R] (default 1)
.PP
\ \ \ \ \[lq]radius\[rq] refers to the size of rounded corners
.PP
menu_border = \f[B]integer\f[R] (default 0)
.PP
\ \ \ \ \[lq]border\[rq] refers to the border-thickness
.PP
menu_halign = (left | right | center) (default left)
.PD 0
.P
.PD
menu_valign = (top | bottom | center) (default bottom)
.PP
\ \ \ \ Horizontal and vertical alignment respectively.
.PP
\ \ \ \ Note: If these variables are not set, jgmenu will try to guess
.PD 0
.P
.PD
\ \ \ \ the alignment and margin by reading \f[C]_NET_WORKAREA\f[R] and
tint2\[cq]s
.PD 0
.P
.PD
\ \ \ \ config file and environment variables.
.PP
\ \ \ \ \f[C]_NET_WORKAREA\f[R] is a freedesktop EWMH root window
property.
Not
.PD 0
.P
.PD
\ \ \ \ all Window Managers and Panels respect these.
.PD 0
.P
.PD
\ \ \ \ Here follow some example of those that do:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ openbox, xfwm4, tint2, polybar
.PD 0
.P
.PD
\ \ \ \ And some that do not:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ awesome, i3, bspwm, plank
.PP
sub_spacing = \f[B]integer\f[R] (default 1)
.PP
\ \ \ \ Horizontal space between windows.
A negative value results in
.PD 0
.P
.PD
\ \ \ \ each submenu window overlapping its parent window.
.PP
sub_padding_top = \f[B]integer\f[R] (default auto)
.PD 0
.P
.PD
sub_padding_right = \f[B]integer\f[R] (default auto)
.PD 0
.P
.PD
sub_padding_bottom = \f[B]integer\f[R] (default auto)
.PD 0
.P
.PD
sub_padding_left = \f[B]integer\f[R] (default auto)
.PP
\ \ \ \ The same as \f[C]menu_padding_*\f[R] but applies to submenu
windows
.PD 0
.P
.PD
\ \ \ \ only.
It understands the keyword `auto'.
If set to `auto', the
.PD 0
.P
.PD
\ \ \ \ smallest of the four \f[C]menu_padding_*\f[R] will be used.
.PP
sub_hover_action = \f[B]integer\f[R] (default 1)
.PP
\ \ \ \ Open submenu when hovering over item (only works in multi-window
.PD 0
.P
.PD
\ \ \ \ mode).
.PP
item_margin_x = \f[B]integer\f[R] (default 3)
.PD 0
.P
.PD
item_margin_y = \f[B]integer\f[R] (default 3)
.PD 0
.P
.PD
item_height = \f[B]integer\f[R] (default 25)
.PD 0
.P
.PD
item_padding_x = \f[B]integer\f[R] (default 4)
.PD 0
.P
.PD
item_radius = \f[B]integer\f[R] (default 1)
.PD 0
.P
.PD
item_border = \f[B]integer\f[R] (default 0)
.PP
\ \ \ \ See equivalent \f[C]menu_\f[R] variable definitions.
.PP
item_halign = (left | right) (default left)
.PP
\ \ \ \ Horizontal alignment of actual menu items.
Items are left-aligned
.PD 0
.P
.PD
\ \ \ \ by default.
If set to right, the option \f[C]arrow_string\f[R] should be
.PD 0
.P
.PD
\ \ \ \ changed too.
.PP
sep_height = \f[B]integer\f[R] (default 5)
.PP
\ \ \ \ Height of separator without text (defined by \[ha]sep())
.PD 0
.P
.PD
\ \ \ \ Note that separators with text use \f[C]item_height\f[R]
.PP
sep_halign = (left | center | right) (default left)
.PP
\ \ \ \ Horizontal alignment of separator text
.PP
sep_markup = \f[B]string\f[R] (unset by default)
.PP
\ \ \ \ If specified, \f[C]<span $sep_markup>foo</span>\f[R] will be
passed to pango
.PD 0
.P
.PD
\ \ \ \ for \[ha]sep(foo).
See the following link for pango attributes:
.PD 0
.P
.PD
\ \ \ \ https://developer.gnome.org/pango/stable/PangoMarkupFormat.html
.PP
\ \ \ \ Keywords include (but are not limited to):
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ font
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ size (x-small, small, medium, large, x-large)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ style (normal, oblique, italic)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ weight (ultralight, light, normal, bold, ultrabold,
heavy
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ foreground (using format #rrggbb or a colour name)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ underline (none, single, double)
.PP
\ \ \ \ Example:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \f[C]sep_markup = font=\[dq]Sans Italic 12\[dq] foreground=\[dq]blue\[dq]\f[R]
.PP
font = \f[B]string\f[R] (unset by default)
.PP
\ \ \ \ \f[I]font\f[R] accepts a string such as \f[I]Cantarell 10\f[R]
or
.PD 0
.P
.PD
\ \ \ \ \f[I]UbuntuCondensed 11\f[R].
The font description without a specified
.PD 0
.P
.PD
\ \ \ \ size unit is interpreted as \[lq]points\[rq].
If \[lq]px\[rq] is added, it will
.PD 0
.P
.PD
\ \ \ \ be read as pixels.\ Using \[lq]points\[rq] enables consistency
with other
.PD 0
.P
.PD
\ \ \ \ applications.
.PP
font_fallback = \f[B]string\f[R] (default xtg)
.PP
\ \ \ \ The same as `icon_theme_fallback' (see below), except that
.PD 0
.P
.PD
\ \ \ \ the xsettings variable `Gtk/FontName' is read.
.PP
icon_size = \f[B]integer\f[R] (default 22)
.PP
\ \ \ \ If icon_size is set to 0, icons will not be searched for and
.PD 0
.P
.PD
\ \ \ \ loaded.
.PP
icon_text_spacing = \f[B]integer\f[R] (default 10)
.PP
\ \ \ \ Distance between icon and text.
.PP
icon_theme = \f[B]string\f[R] (unset by default)
.PP
\ \ \ \ Specify icon theme.
.PP
icon_theme_fallback = \f[B]string\f[R] (default xtg)
.PP
\ \ \ \ Specifies the fallback sources of the icon theme in order of
.PD 0
.P
.PD
\ \ \ \ precedence, where the left-most letter designates the source
.PD 0
.P
.PD
\ \ \ \ with the highest precedence.
The following are acceptable
.PD 0
.P
.PD
\ \ \ \ characters:
.PP
\ \ \ \ x = xsettings `Net/IconThemeName'
.PD 0
.P
.PD
\ \ \ \ t = tint2 config file
.PD 0
.P
.PD
\ \ \ \ g = gtk3.0 config file
.PP
\ \ \ \ `icon_theme' takes priority if set.
.PP
\ \ \ \ In order to increase consistency with tint2, xsettings
.PD 0
.P
.PD
\ \ \ \ variables will only be read if the tint2rc variable
.PD 0
.P
.PD
\ \ \ \ launcher_icon_theme_override is zero.
.PP
arrow_string = \f[B]string\f[R] (default \[u25B8])
.PP
\ \ \ \ The \[lq]arrow\[rq] indicates that a menu item points a submenu.
.PD 0
.P
.PD
\ \ \ \ Suggested styles include:
.PD 0
.P
.PD
\ \ \ \ \[->] \[u25B6] \[u2794] \[u2799] \[u279B] \[u279C] \[u279D]
\[u279E] \[u279F] \[u27A0] \[u27A1] \[u27A2] \[u27A3] \[u27A4] \[u27A5]
\[u27A6] \[u21A6] \[rA] \[u21DD] \[u21E2] \[u21E5] \[u21E8] \[u21FE]
\[u27AD] \[u27AE] \[u27AF] \[u27B1] \[u27B2] \[u27BA] \[u27BC] \[u27BD]
\[u27BE]
.PP
arrow_width = \f[B]integer\f[R] (default 15)
.PP
\ \ \ \ Width of area allocated for arrow.
Set to 0 to hide arrow.
.PP
color_menu_bg = \f[B]color\f[R] (default #000000 85)
.PP
\ \ \ \ Background colour of menu window
.PP
color_menu_border = \f[B]color\f[R] (default #eeeeee 8)
.PP
\ \ \ \ Border colour of menu window
.PP
color_norm_bg = \f[B]color\f[R] (default #000000 0)
.PD 0
.P
.PD
color_norm_fg = \f[B]color\f[R] (default #eeeeee 100)
.PP
\ \ \ \ Background and foreground (=font) colors of all menu items,
.PD 0
.P
.PD
\ \ \ \ except the one currently selected.
.PP
color_sel_bg = \f[B]color\f[R] (default #ffffff 20)
.PD 0
.P
.PD
color_sel_fg = \f[B]color\f[R] (default #eeeeee 100)
.PD 0
.P
.PD
color_sel_border = \f[B]color\f[R] (default #eeeeee 8)
.PP
\ \ \ \ Background, foreground (=font) and border colors of the
currently
.PD 0
.P
.PD
\ \ \ \ selected menu item.
.PP
color_sep_fg = \f[B]color\f[R] (default #ffffff 20)
.PP
\ \ \ \ Colour of seperators without text
.PP
color_title_fg = \f[B]color\f[R] (default #eeeeee 50)
.PD 0
.P
.PD
color_title_bg = \f[B]color\f[R] (default #000000 0)
.PD 0
.P
.PD
color_title_border = \f[B]color\f[R] (default #000000 0)
.PP
\ \ \ \ Foreground (=font), background and border colours of separators
.PD 0
.P
.PD
\ \ \ \ with text (also known as `title')
.PD 0
.P
.PD
\ \ \ \ The font colour can be overriden by `sep_markup'
.PP
color_scroll_ind = \f[B]color\f[R] (default #eeeeee 40)
.PP
\ \ \ \ Colour of scroll indicator lines (which show if there are menu
.PD 0
.P
.PD
\ \ \ \ items above or below those which are visible).
.SS CSV generator variables
.PP
The following variables begin with \[lq]csv_\[rq] which denotes that
they set
.PD 0
.P
.PD
environment variables which are used by the CSV generators.
.PP
csv_name_format = \f[B]string\f[R] (default \f[C]%n (%g)\f[R])
.PP
\ \ \ \ Defines the format of the \f[I]name\f[R] field for CSV
generators
.PD 0
.P
.PD
\ \ \ \ (currently only applicable to lx).
It understands the following
.PD 0
.P
.PD
\ \ \ \ two fields:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ %n - application name
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ %g - application generic name
.PD 0
.P
.PD
\ \ \ \ If a \f[I]generic name\f[R] does not exist or is the same as the
\f[I]name\f[R],
.PD 0
.P
.PD
\ \ \ \ %n will be used without any formatting.
.PP
csv_single_window = \f[B]boolean\f[R] (default 0)
.PP
\ \ \ \ If set, \[ha]root() will be used instead of \[ha]checkout().
.PD 0
.P
.PD
\ \ \ \ This results in a single window menu, where submenus appear in
.PD 0
.P
.PD
\ \ \ \ the same window.
.PD 0
.P
.PD
\ \ \ \ This is currently only supported by pmenu.
.PP
csv_no_dirs = \f[B]boolean\f[R] (default 0)
.PP
\ \ \ \ If set, applications will be listed without any directory
.PD 0
.P
.PD
\ \ \ \ structure.
This is currently only supported by pmenu and lx.
.PP
csv_i18n = \f[B]string\f[R] (no default)
.PP
\ \ \ \ If set, the ob module will look for a translation file in the
.PD 0
.P
.PD
\ \ \ \ specified file or directory.
See \f[C]jgmenu_run i18n --help\f[R] for
.PD 0
.P
.PD
\ \ \ \ further details.
.SH DIAGRAMS
.SS Vertical
.IP
.nf
\f[C]
menu
\[u2554]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2557]  1. menu_padding_top
\[u2551]            1           \[u2551]  2. item_margin_y
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]  3. menu_padding_bottom
\[u2551]            2           \[u2551]
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]
\[u2551]          item          \[u2551]
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]
\[u2551]            2           \[u2551]
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]
\[u2551]          item          \[u2551]
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]
\[u2551]            2           \[u2551]
\[u255F]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2562]
\[u2551]            3           \[u2551]
\[u255A]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u255D]
\f[R]
.fi
.SS Horizontal
.IP
.nf
\f[C]
menu
\[u2554]\[u2550]\[u2564]\[u2550]\[u2564]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2564]\[u2550]\[u2564]\[u2550]\[u2557]  1. item_margin_x
\[u2551] \[br] \[br]                \[br] \[br] \[u2551]  2. padding_left
\[u2551] \[br] \[u251C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2524] \[br] \[u2551]  3. padding_right
\[u2551] \[br] \[br] \[at]    web      >\[br] \[br] \[u2551]  4. icon_size
\[u2551] \[br] \[u251C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2524] \[br] \[u2551]  5. icon_to_text_spacing
\[u2551]2\[br]1\[br]                \[br]1\[br]3\[u2551]  6. arrow_width
\[u2551] \[br] \[u251C]\[u2500]\[u2500]\[u2500]\[u252C]\[u2500]\[u252C]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u252C]\[u2500]\[u2524] \[br] \[u2551]
\[u2551] \[br] \[br] 4 \[br]5\[br]        \[br]6\[br] \[br] \[u2551]
\[u2551] \[br] \[u251C]\[u2500]\[u2500]\[u2500]\[u2534]\[u2500]\[u2534]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2534]\[u2500]\[u2524] \[br] \[u2551]
\[u2551] \[br] \[br]                \[br] \[br] \[u2551]
\[u2551] \[br] \[br]                \[br] \[br] \[u2551]
\[u255A]\[u2550]\[u2567]\[u2550]\[u2567]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2567]\[u2550]\[u2567]\[u2550]\[u255D]
\f[R]
.fi
.SS External to menu
.IP
.nf
\f[C]
screen
\[u2554]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2557]  1. menu_margin_x
\[u2551]    2                   \[u2551]  2. menu_margin_y
\[u2551] \[lt]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2510]               \[u2551]  3. sub_spacing
\[u2551] \[br] root \[br] \[lt]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2510]      \[u2551]
\[u2551]1\[br] menu \[br] \[br] sub  \[br]      \[u2551]
\[u2551] \[br]      \[br]3\[br] menu \[br]      \[u2551]
\[u2551] \[u2514]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2518] \[br]      \[br]      \[u2551]
\[u2551]          \[u2514]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2500]\[u2518]      \[u2551]
\[u2551]                        \[u2551]
\[u2551]                        \[u2551]
\[u2551]                        \[u2551]
\[u255A]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u2550]\[u255D]
\f[R]
.fi
.SH SEE ALSO
.PP
\f[C]jgmenu_run(1)\f[R]
.PD 0
.P
.PD
\f[C]jgmenututorial(7)\f[R]
.PP
The jgmenu source code and documentation can be downloaded from
.PD 0
.P
.PD
<https://github.com/johanmalm/jgmenu/>
.SH AUTHORS
Johan Malm.
